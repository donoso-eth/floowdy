/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type FloowdyInitStruct = {
  host: string;
  superToken: string;
  token: string;
  pool: string;
  stableDebtToken: string;
  debtToken: string;
  aToken: string;
  ops: string;
  epnsComm: string;
  epnsChannel: string;
};

export type FloowdyInitStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  host: string;
  superToken: string;
  token: string;
  pool: string;
  stableDebtToken: string;
  debtToken: string;
  aToken: string;
  ops: string;
  epnsComm: string;
  epnsChannel: string;
};

export type CreditDelegatorsOptionsStruct = {
  delegatorsNr: BigNumberish;
  delegatorsRequired: BigNumberish;
  delegators: string[];
  delegatorsAmount: BigNumberish;
  delegatorsGlobalFee: BigNumberish;
};

export type CreditDelegatorsOptionsStructOutput = [
  BigNumber,
  BigNumber,
  string[],
  BigNumber,
  BigNumber
] & {
  delegatorsNr: BigNumber;
  delegatorsRequired: BigNumber;
  delegators: string[];
  delegatorsAmount: BigNumber;
  delegatorsGlobalFee: BigNumber;
};

export type CreditRepaymentOptionsStruct = {
  nrInstallments: BigNumberish;
  interval: BigNumberish;
  installment: BigNumberish;
  installmentPrincipal: BigNumberish;
  installmentRateAave: BigNumberish;
  installmentRatePool: BigNumberish;
  amount: BigNumberish;
  rateAave: BigNumberish;
  ratePool: BigNumberish;
  totalYield: BigNumberish;
  currentInstallment: BigNumberish;
  GelatoRepaymentTaskId: BytesLike;
};

export type CreditRepaymentOptionsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  nrInstallments: BigNumber;
  interval: BigNumber;
  installment: BigNumber;
  installmentPrincipal: BigNumber;
  installmentRateAave: BigNumber;
  installmentRatePool: BigNumber;
  amount: BigNumber;
  rateAave: BigNumber;
  ratePool: BigNumber;
  totalYield: BigNumber;
  currentInstallment: BigNumber;
  GelatoRepaymentTaskId: string;
};

export type POOLDELEGATIONStruct = {
  totalDelegated: BigNumberish;
  percentageLocked: BigNumberish;
  totalYieldCredit: BigNumberish;
  liquidatedIndex: BigNumberish;
  totalLiquidated: BigNumberish;
};

export type POOLDELEGATIONStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  totalDelegated: BigNumber;
  percentageLocked: BigNumber;
  totalYieldCredit: BigNumber;
  liquidatedIndex: BigNumber;
  totalLiquidated: BigNumber;
};

export type CreditRequestOptionsStruct = {
  amount: BigNumberish;
  rateAave: BigNumberish;
  ratePool: BigNumberish;
  interval: BigNumberish;
  nrInstallments: BigNumberish;
  handle: string;
  bio: string;
};

export type CreditRequestOptionsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  amount: BigNumber;
  rateAave: BigNumber;
  ratePool: BigNumber;
  interval: BigNumber;
  nrInstallments: BigNumber;
  handle: string;
  bio: string;
};

export interface FloowdyInterface extends utils.Interface {
  functions: {
    "ETH()": FunctionFragment;
    "_getMemberAvailable(address)": FunctionFragment;
    "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "beforeAgreementCreated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": FunctionFragment;
    "cancelCredit(uint256)": FunctionFragment;
    "cancelTask(bytes32)": FunctionFragment;
    "cfa()": FunctionFragment;
    "checkCreditPeriod(uint256)": FunctionFragment;
    "checkDelegation(uint256)": FunctionFragment;
    "checkRepayment(uint256)": FunctionFragment;
    "checkStakeAvailable()": FunctionFragment;
    "checkStopStream(address)": FunctionFragment;
    "creditApproved(uint256)": FunctionFragment;
    "creditCheckIn(uint256)": FunctionFragment;
    "creditCheckOut(uint256)": FunctionFragment;
    "creditIdByAddresse(address)": FunctionFragment;
    "creditsById(uint256)": FunctionFragment;
    "delegatorsStatus(uint256,address)": FunctionFragment;
    "epnsChannel()": FunctionFragment;
    "epnsComm()": FunctionFragment;
    "gelato()": FunctionFragment;
    "getAaveData()": FunctionFragment;
    "getMaxAmount()": FunctionFragment;
    "host()": FunctionFragment;
    "memberAdressById(uint256)": FunctionFragment;
    "memberWithdraw(uint256)": FunctionFragment;
    "members(address)": FunctionFragment;
    "ops()": FunctionFragment;
    "parseLoanData(bytes)": FunctionFragment;
    "poolByTimestamp(uint256)": FunctionFragment;
    "poolId()": FunctionFragment;
    "poolRebalance()": FunctionFragment;
    "poolTimestamp()": FunctionFragment;
    "rejectCredit(uint256)": FunctionFragment;
    "requestCredit((uint256,uint256,uint256,uint256,uint256,string,string))": FunctionFragment;
    "stopCreditPeriodExec(uint256)": FunctionFragment;
    "stopStreamExec(address)": FunctionFragment;
    "supplyStakeToAave()": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "totalCredits()": FunctionFragment;
    "totalYieldStakeEarnedMember(address)": FunctionFragment;
    "triggerRepayment(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_getMemberAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementCreated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementTerminated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeAgreementUpdated",
    values: [string, string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "cfa", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkCreditPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkDelegation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRepayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkStakeAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkStopStream",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditCheckIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditCheckOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditIdByAddresse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creditsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorsStatus",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "epnsChannel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epnsComm", values?: undefined): string;
  encodeFunctionData(functionFragment: "gelato", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAaveData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "memberAdressById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "memberWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseLoanData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolByTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolRebalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectCredit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCredit",
    values: [CreditRequestOptionsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stopCreditPeriodExec",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopStreamExec",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyStakeToAave",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalYieldStakeEarnedMember",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerRepayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getMemberAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeAgreementUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cfa", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkCreditPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRepayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkStakeAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkStopStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditCheckIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditCheckOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditIdByAddresse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorsStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epnsChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epnsComm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gelato", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAaveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberAdressById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseLoanData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopCreditPeriodExec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopStreamExec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyStakeToAave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalYieldStakeEarnedMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerRepayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface Floowdy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FloowdyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH(overrides?: CallOverrides): Promise<[string]>;

    _getMemberAvailable(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { availableBalance: BigNumber }>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cancelCredit(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cfa(overrides?: CallOverrides): Promise<[string]>;

    checkCreditPeriod(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkDelegation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkRepayment(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkStakeAvailable(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkStopStream(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    creditApproved(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditCheckIn(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditCheckOut(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditIdByAddresse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    creditsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        CreditDelegatorsOptionsStructOutput,
        CreditRepaymentOptionsStructOutput
      ] & {
        id: BigNumber;
        requester: string;
        initTimestamp: BigNumber;
        finishPhaseTimestamp: BigNumber;
        status: number;
        gelatoTaskId: string;
        delegatorsOptions: CreditDelegatorsOptionsStructOutput;
        repaymentOptions: CreditRepaymentOptionsStructOutput;
      }
    >;

    delegatorsStatus(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epnsChannel(overrides?: CallOverrides): Promise<[string]>;

    epnsComm(overrides?: CallOverrides): Promise<[string]>;

    gelato(overrides?: CallOverrides): Promise<[string]>;

    getAaveData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDebtBase: BigNumber;
        availableBorrowsBase: BigNumber;
        depositAPR: BigNumber;
        stableBorrowAPR: BigNumber;
      }
    >;

    getMaxAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxAmount: BigNumber }>;

    host(overrides?: CallOverrides): Promise<[string]>;

    memberAdressById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    memberWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        member: string;
        flow: BigNumber;
        flowGelatoId: string;
        flowDuration: BigNumber;
        deposit: BigNumber;
        timestamp: BigNumber;
        initTimestamp: BigNumber;
        yieldAccrued: BigNumber;
        amountLocked: BigNumber;
        amountLoss: BigNumber;
        currentYield: BigNumber;
        memberSpan: BigNumber;
      }
    >;

    ops(overrides?: CallOverrides): Promise<[string]>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { duration: BigNumber }>;

    poolByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        POOLDELEGATIONStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        timestamp: BigNumber;
        totalFlow: BigNumber;
        totalDeposit: BigNumber;
        totalDepositFlow: BigNumber;
        depositIndex: BigNumber;
        flowIndex: BigNumber;
        totalYieldStake: BigNumber;
        totalStaked: BigNumber;
        delegation: POOLDELEGATIONStructOutput;
        nrMembers: BigNumber;
        yieldPeriod: BigNumber;
        poolSpan: BigNumber;
      }
    >;

    poolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    rejectCredit(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestCredit(
      options: CreditRequestOptionsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopCreditPeriodExec(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopStreamExec(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyStakeToAave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalCredits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalYieldStakeEarnedMember(
      _member: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yieldMember: BigNumber }>;

    triggerRepayment(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH(overrides?: CallOverrides): Promise<string>;

  _getMemberAvailable(
    _member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  afterAgreementCreated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  afterAgreementUpdated(
    _superToken: string,
    _agreementClass: string,
    arg2: BytesLike,
    _agreementData: BytesLike,
    arg4: BytesLike,
    _ctx: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beforeAgreementCreated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementTerminated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  beforeAgreementUpdated(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  cancelCredit(
    creditId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelTask(
    _taskId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cfa(overrides?: CallOverrides): Promise<string>;

  checkCreditPeriod(
    _creditId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  checkDelegation(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkRepayment(
    creditId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  checkStakeAvailable(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  checkStopStream(
    _receiver: string,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  creditApproved(
    creditId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditCheckIn(
    creditId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditCheckOut(
    creditId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditIdByAddresse(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  creditsById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      number,
      string,
      CreditDelegatorsOptionsStructOutput,
      CreditRepaymentOptionsStructOutput
    ] & {
      id: BigNumber;
      requester: string;
      initTimestamp: BigNumber;
      finishPhaseTimestamp: BigNumber;
      status: number;
      gelatoTaskId: string;
      delegatorsOptions: CreditDelegatorsOptionsStructOutput;
      repaymentOptions: CreditRepaymentOptionsStructOutput;
    }
  >;

  delegatorsStatus(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epnsChannel(overrides?: CallOverrides): Promise<string>;

  epnsComm(overrides?: CallOverrides): Promise<string>;

  gelato(overrides?: CallOverrides): Promise<string>;

  getAaveData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalDebtBase: BigNumber;
      availableBorrowsBase: BigNumber;
      depositAPR: BigNumber;
      stableBorrowAPR: BigNumber;
    }
  >;

  getMaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  host(overrides?: CallOverrides): Promise<string>;

  memberAdressById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  memberWithdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      member: string;
      flow: BigNumber;
      flowGelatoId: string;
      flowDuration: BigNumber;
      deposit: BigNumber;
      timestamp: BigNumber;
      initTimestamp: BigNumber;
      yieldAccrued: BigNumber;
      amountLocked: BigNumber;
      amountLoss: BigNumber;
      currentYield: BigNumber;
      memberSpan: BigNumber;
    }
  >;

  ops(overrides?: CallOverrides): Promise<string>;

  parseLoanData(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  poolByTimestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      POOLDELEGATIONStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      timestamp: BigNumber;
      totalFlow: BigNumber;
      totalDeposit: BigNumber;
      totalDepositFlow: BigNumber;
      depositIndex: BigNumber;
      flowIndex: BigNumber;
      totalYieldStake: BigNumber;
      totalStaked: BigNumber;
      delegation: POOLDELEGATIONStructOutput;
      nrMembers: BigNumber;
      yieldPeriod: BigNumber;
      poolSpan: BigNumber;
    }
  >;

  poolId(overrides?: CallOverrides): Promise<BigNumber>;

  poolRebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  rejectCredit(
    creditId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestCredit(
    options: CreditRequestOptionsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopCreditPeriodExec(
    creditId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopStreamExec(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyStakeToAave(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensReceived(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalCredits(overrides?: CallOverrides): Promise<BigNumber>;

  totalYieldStakeEarnedMember(
    _member: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  triggerRepayment(
    creditId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH(overrides?: CallOverrides): Promise<string>;

    _getMemberAvailable(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    cancelCredit(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTask(_taskId: BytesLike, overrides?: CallOverrides): Promise<void>;

    cfa(overrides?: CallOverrides): Promise<string>;

    checkCreditPeriod(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkDelegation(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkRepayment(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkStakeAvailable(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    checkStopStream(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    creditApproved(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creditCheckIn(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creditCheckOut(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    creditIdByAddresse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        CreditDelegatorsOptionsStructOutput,
        CreditRepaymentOptionsStructOutput
      ] & {
        id: BigNumber;
        requester: string;
        initTimestamp: BigNumber;
        finishPhaseTimestamp: BigNumber;
        status: number;
        gelatoTaskId: string;
        delegatorsOptions: CreditDelegatorsOptionsStructOutput;
        repaymentOptions: CreditRepaymentOptionsStructOutput;
      }
    >;

    delegatorsStatus(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epnsChannel(overrides?: CallOverrides): Promise<string>;

    epnsComm(overrides?: CallOverrides): Promise<string>;

    gelato(overrides?: CallOverrides): Promise<string>;

    getAaveData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDebtBase: BigNumber;
        availableBorrowsBase: BigNumber;
        depositAPR: BigNumber;
        stableBorrowAPR: BigNumber;
      }
    >;

    getMaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    host(overrides?: CallOverrides): Promise<string>;

    memberAdressById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    memberWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        member: string;
        flow: BigNumber;
        flowGelatoId: string;
        flowDuration: BigNumber;
        deposit: BigNumber;
        timestamp: BigNumber;
        initTimestamp: BigNumber;
        yieldAccrued: BigNumber;
        amountLocked: BigNumber;
        amountLoss: BigNumber;
        currentYield: BigNumber;
        memberSpan: BigNumber;
      }
    >;

    ops(overrides?: CallOverrides): Promise<string>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        POOLDELEGATIONStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        timestamp: BigNumber;
        totalFlow: BigNumber;
        totalDeposit: BigNumber;
        totalDepositFlow: BigNumber;
        depositIndex: BigNumber;
        flowIndex: BigNumber;
        totalYieldStake: BigNumber;
        totalStaked: BigNumber;
        delegation: POOLDELEGATIONStructOutput;
        nrMembers: BigNumber;
        yieldPeriod: BigNumber;
        poolSpan: BigNumber;
      }
    >;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    poolRebalance(overrides?: CallOverrides): Promise<void>;

    poolTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rejectCredit(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestCredit(
      options: CreditRequestOptionsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    stopCreditPeriodExec(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stopStreamExec(_receiver: string, overrides?: CallOverrides): Promise<void>;

    supplyStakeToAave(overrides?: CallOverrides): Promise<void>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCredits(overrides?: CallOverrides): Promise<BigNumber>;

    totalYieldStakeEarnedMember(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerRepayment(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    ETH(overrides?: CallOverrides): Promise<BigNumber>;

    _getMemberAvailable(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelCredit(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cfa(overrides?: CallOverrides): Promise<BigNumber>;

    checkCreditPeriod(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkDelegation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkRepayment(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkStakeAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    checkStopStream(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditApproved(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditCheckIn(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditCheckOut(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditIdByAddresse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatorsStatus(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epnsChannel(overrides?: CallOverrides): Promise<BigNumber>;

    epnsComm(overrides?: CallOverrides): Promise<BigNumber>;

    gelato(overrides?: CallOverrides): Promise<BigNumber>;

    getAaveData(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    host(overrides?: CallOverrides): Promise<BigNumber>;

    memberAdressById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<BigNumber>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    poolRebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rejectCredit(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestCredit(
      options: CreditRequestOptionsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopCreditPeriodExec(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopStreamExec(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyStakeToAave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalCredits(overrides?: CallOverrides): Promise<BigNumber>;

    totalYieldStakeEarnedMember(
      _member: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerRepayment(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getMemberAvailable(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    afterAgreementCreated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    afterAgreementUpdated(
      _superToken: string,
      _agreementClass: string,
      arg2: BytesLike,
      _agreementData: BytesLike,
      arg4: BytesLike,
      _ctx: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beforeAgreementCreated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementTerminated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeAgreementUpdated(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelCredit(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelTask(
      _taskId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cfa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkCreditPeriod(
      _creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkDelegation(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkRepayment(
      creditId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkStakeAvailable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkStopStream(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditApproved(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditCheckIn(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditCheckOut(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditIdByAddresse(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creditsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatorsStatus(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epnsChannel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epnsComm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gelato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAaveData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    host(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    memberAdressById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseLoanData(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolByTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectCredit(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestCredit(
      options: CreditRequestOptionsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopCreditPeriodExec(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopStreamExec(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyStakeToAave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalCredits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalYieldStakeEarnedMember(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggerRepayment(
      creditId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

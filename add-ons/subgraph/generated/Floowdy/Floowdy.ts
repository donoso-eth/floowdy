// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreditAction extends ethereum.Event {
  get params(): CreditAction__Params {
    return new CreditAction__Params(this);
  }
}

export class CreditAction__Params {
  _event: CreditAction;

  constructor(event: CreditAction) {
    this._event = event;
  }

  get credit(): CreditActionCreditStruct {
    return changetype<CreditActionCreditStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class CreditActionCreditStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get requester(): Address {
    return this[1].toAddress();
  }

  get initTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get denyPeriodTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get delegatorsNr(): BigInt {
    return this[7].toBigInt();
  }

  get delegatorsRequired(): BigInt {
    return this[8].toBigInt();
  }

  get delegators(): Array<Address> {
    return this[9].toAddressArray();
  }

  get delegatorsAmount(): BigInt {
    return this[10].toBigInt();
  }

  get gelatoTaskId(): Bytes {
    return this[11].toBytes();
  }
}

export class CreditApproved extends ethereum.Event {
  get params(): CreditApproved__Params {
    return new CreditApproved__Params(this);
  }
}

export class CreditApproved__Params {
  _event: CreditApproved;

  constructor(event: CreditApproved) {
    this._event = event;
  }

  get credit(): CreditApprovedCreditStruct {
    return changetype<CreditApprovedCreditStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class CreditApprovedCreditStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get requester(): Address {
    return this[1].toAddress();
  }

  get initTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get denyPeriodTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get delegatorsNr(): BigInt {
    return this[7].toBigInt();
  }

  get delegatorsRequired(): BigInt {
    return this[8].toBigInt();
  }

  get delegators(): Array<Address> {
    return this[9].toAddressArray();
  }

  get delegatorsAmount(): BigInt {
    return this[10].toBigInt();
  }

  get gelatoTaskId(): Bytes {
    return this[11].toBytes();
  }
}

export class CreditCancelled extends ethereum.Event {
  get params(): CreditCancelled__Params {
    return new CreditCancelled__Params(this);
  }
}

export class CreditCancelled__Params {
  _event: CreditCancelled;

  constructor(event: CreditCancelled) {
    this._event = event;
  }

  get credit(): CreditCancelledCreditStruct {
    return changetype<CreditCancelledCreditStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class CreditCancelledCreditStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get requester(): Address {
    return this[1].toAddress();
  }

  get initTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get denyPeriodTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get delegatorsNr(): BigInt {
    return this[7].toBigInt();
  }

  get delegatorsRequired(): BigInt {
    return this[8].toBigInt();
  }

  get delegators(): Array<Address> {
    return this[9].toAddressArray();
  }

  get delegatorsAmount(): BigInt {
    return this[10].toBigInt();
  }

  get gelatoTaskId(): Bytes {
    return this[11].toBytes();
  }
}

export class CreditCheckIn extends ethereum.Event {
  get params(): CreditCheckIn__Params {
    return new CreditCheckIn__Params(this);
  }
}

export class CreditCheckIn__Params {
  _event: CreditCheckIn;

  constructor(event: CreditCheckIn) {
    this._event = event;
  }

  get creditId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get delegator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreditCheckOut extends ethereum.Event {
  get params(): CreditCheckOut__Params {
    return new CreditCheckOut__Params(this);
  }
}

export class CreditCheckOut__Params {
  _event: CreditCheckOut;

  constructor(event: CreditCheckOut) {
    this._event = event;
  }

  get creditId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get delegator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreditDiscarded extends ethereum.Event {
  get params(): CreditDiscarded__Params {
    return new CreditDiscarded__Params(this);
  }
}

export class CreditDiscarded__Params {
  _event: CreditDiscarded;

  constructor(event: CreditDiscarded) {
    this._event = event;
  }

  get credit(): CreditDiscardedCreditStruct {
    return changetype<CreditDiscardedCreditStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class CreditDiscardedCreditStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get requester(): Address {
    return this[1].toAddress();
  }

  get initTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get denyPeriodTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get delegatorsNr(): BigInt {
    return this[7].toBigInt();
  }

  get delegatorsRequired(): BigInt {
    return this[8].toBigInt();
  }

  get delegators(): Array<Address> {
    return this[9].toAddressArray();
  }

  get delegatorsAmount(): BigInt {
    return this[10].toBigInt();
  }

  get gelatoTaskId(): Bytes {
    return this[11].toBytes();
  }
}

export class CreditRejected extends ethereum.Event {
  get params(): CreditRejected__Params {
    return new CreditRejected__Params(this);
  }
}

export class CreditRejected__Params {
  _event: CreditRejected;

  constructor(event: CreditRejected) {
    this._event = event;
  }

  get credit(): CreditRejectedCreditStruct {
    return changetype<CreditRejectedCreditStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class CreditRejectedCreditStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get requester(): Address {
    return this[1].toAddress();
  }

  get initTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get denyPeriodTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get delegatorsNr(): BigInt {
    return this[7].toBigInt();
  }

  get delegatorsRequired(): BigInt {
    return this[8].toBigInt();
  }

  get delegators(): Array<Address> {
    return this[9].toAddressArray();
  }

  get delegatorsAmount(): BigInt {
    return this[10].toBigInt();
  }

  get gelatoTaskId(): Bytes {
    return this[11].toBytes();
  }
}

export class CreditRequested extends ethereum.Event {
  get params(): CreditRequested__Params {
    return new CreditRequested__Params(this);
  }
}

export class CreditRequested__Params {
  _event: CreditRequested;

  constructor(event: CreditRequested) {
    this._event = event;
  }

  get credit(): CreditRequestedCreditStruct {
    return changetype<CreditRequestedCreditStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class CreditRequestedCreditStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get requester(): Address {
    return this[1].toAddress();
  }

  get initTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get denyPeriodTimestamp(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get delegatorsNr(): BigInt {
    return this[7].toBigInt();
  }

  get delegatorsRequired(): BigInt {
    return this[8].toBigInt();
  }

  get delegators(): Array<Address> {
    return this[9].toAddressArray();
  }

  get delegatorsAmount(): BigInt {
    return this[10].toBigInt();
  }

  get gelatoTaskId(): Bytes {
    return this[11].toBytes();
  }
}

export class MemberDelegateCredit extends ethereum.Event {
  get params(): MemberDelegateCredit__Params {
    return new MemberDelegateCredit__Params(this);
  }
}

export class MemberDelegateCredit__Params {
  _event: MemberDelegateCredit;

  constructor(event: MemberDelegateCredit) {
    this._event = event;
  }

  get creditId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get member(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountLocked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MemberDeposit extends ethereum.Event {
  get params(): MemberDeposit__Params {
    return new MemberDeposit__Params(this);
  }
}

export class MemberDeposit__Params {
  _event: MemberDeposit;

  constructor(event: MemberDeposit) {
    this._event = event;
  }

  get member(): MemberDepositMemberStruct {
    return changetype<MemberDepositMemberStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class MemberDepositMemberStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get member(): Address {
    return this[1].toAddress();
  }

  get flow(): BigInt {
    return this[2].toBigInt();
  }

  get flowGelatoId(): Bytes {
    return this[3].toBytes();
  }

  get flowDuration(): BigInt {
    return this[4].toBigInt();
  }

  get deposit(): BigInt {
    return this[5].toBigInt();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }

  get initTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[8].toBigInt();
  }

  get amountLocked(): BigInt {
    return this[9].toBigInt();
  }
}

export class MemberStream extends ethereum.Event {
  get params(): MemberStream__Params {
    return new MemberStream__Params(this);
  }
}

export class MemberStream__Params {
  _event: MemberStream;

  constructor(event: MemberStream) {
    this._event = event;
  }

  get member(): MemberStreamMemberStruct {
    return changetype<MemberStreamMemberStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class MemberStreamMemberStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get member(): Address {
    return this[1].toAddress();
  }

  get flow(): BigInt {
    return this[2].toBigInt();
  }

  get flowGelatoId(): Bytes {
    return this[3].toBytes();
  }

  get flowDuration(): BigInt {
    return this[4].toBigInt();
  }

  get deposit(): BigInt {
    return this[5].toBigInt();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }

  get initTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get yieldAccrued(): BigInt {
    return this[8].toBigInt();
  }

  get amountLocked(): BigInt {
    return this[9].toBigInt();
  }
}

export class PoolUpdated extends ethereum.Event {
  get params(): PoolUpdated__Params {
    return new PoolUpdated__Params(this);
  }
}

export class PoolUpdated__Params {
  _event: PoolUpdated;

  constructor(event: PoolUpdated) {
    this._event = event;
  }

  get pool(): PoolUpdatedPoolStruct {
    return changetype<PoolUpdatedPoolStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class PoolUpdatedPoolStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get totalFlow(): BigInt {
    return this[2].toBigInt();
  }

  get totalDeposit(): BigInt {
    return this[3].toBigInt();
  }

  get totalDepositFlow(): BigInt {
    return this[4].toBigInt();
  }

  get totalYield(): BigInt {
    return this[5].toBigInt();
  }

  get depositIndex(): BigInt {
    return this[6].toBigInt();
  }

  get flowIndex(): BigInt {
    return this[7].toBigInt();
  }

  get totalDelegated(): BigInt {
    return this[8].toBigInt();
  }

  get totalMembers(): BigInt {
    return this[9].toBigInt();
  }
}

export class Floowdy__checkCreditPeriodResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class Floowdy__checkStopStreamResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class Floowdy__creditsByIdResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: Bytes;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromFixedBytes(this.value10));
    return map;
  }
}

export class Floowdy__membersResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Bytes;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Bytes,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class Floowdy__poolByTimestampResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class Floowdy extends ethereum.SmartContract {
  static bind(address: Address): Floowdy {
    return new Floowdy("Floowdy", address);
  }

  ETH(): Address {
    let result = super.call("ETH", "ETH():(address)", []);

    return result[0].toAddress();
  }

  try_ETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH", "ETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementCreated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementCreated",
      "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementTerminated",
      "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): Bytes {
    let result = super.call(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );

    return result[0].toBytes();
  }

  try_afterAgreementUpdated(
    _superToken: Address,
    _agreementClass: Address,
    param2: Bytes,
    _agreementData: Bytes,
    param4: Bytes,
    _ctx: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "afterAgreementUpdated",
      "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(_superToken),
        ethereum.Value.fromAddress(_agreementClass),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(_agreementData),
        ethereum.Value.fromBytes(param4),
        ethereum.Value.fromBytes(_ctx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementCreated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementCreated",
      "beforeAgreementCreated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementTerminated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementTerminated",
      "beforeAgreementTerminated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_beforeAgreementUpdated(
    param0: Address,
    param1: Address,
    param2: Bytes,
    param3: Bytes,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "beforeAgreementUpdated",
      "beforeAgreementUpdated(address,address,bytes32,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromFixedBytes(param2),
        ethereum.Value.fromBytes(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  cfa(): Address {
    let result = super.call("cfa", "cfa():(address)", []);

    return result[0].toAddress();
  }

  try_cfa(): ethereum.CallResult<Address> {
    let result = super.tryCall("cfa", "cfa():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkCreditPeriod(_creditId: BigInt): Floowdy__checkCreditPeriodResult {
    let result = super.call(
      "checkCreditPeriod",
      "checkCreditPeriod(uint256):(bool,bytes)",
      [ethereum.Value.fromUnsignedBigInt(_creditId)]
    );

    return new Floowdy__checkCreditPeriodResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkCreditPeriod(
    _creditId: BigInt
  ): ethereum.CallResult<Floowdy__checkCreditPeriodResult> {
    let result = super.tryCall(
      "checkCreditPeriod",
      "checkCreditPeriod(uint256):(bool,bytes)",
      [ethereum.Value.fromUnsignedBigInt(_creditId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Floowdy__checkCreditPeriodResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  checkStopStream(_receiver: Address): Floowdy__checkStopStreamResult {
    let result = super.call(
      "checkStopStream",
      "checkStopStream(address):(bool,bytes)",
      [ethereum.Value.fromAddress(_receiver)]
    );

    return new Floowdy__checkStopStreamResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkStopStream(
    _receiver: Address
  ): ethereum.CallResult<Floowdy__checkStopStreamResult> {
    let result = super.tryCall(
      "checkStopStream",
      "checkStopStream(address):(bool,bytes)",
      [ethereum.Value.fromAddress(_receiver)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Floowdy__checkStopStreamResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  creditIdByAddresse(param0: Address): BigInt {
    let result = super.call(
      "creditIdByAddresse",
      "creditIdByAddresse(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_creditIdByAddresse(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "creditIdByAddresse",
      "creditIdByAddresse(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creditsById(param0: BigInt): Floowdy__creditsByIdResult {
    let result = super.call(
      "creditsById",
      "creditsById(uint256):(uint256,address,uint256,uint256,uint8,uint256,uint256,uint256,uint256,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Floowdy__creditsByIdResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBytes()
    );
  }

  try_creditsById(
    param0: BigInt
  ): ethereum.CallResult<Floowdy__creditsByIdResult> {
    let result = super.tryCall(
      "creditsById",
      "creditsById(uint256):(uint256,address,uint256,uint256,uint8,uint256,uint256,uint256,uint256,uint256,bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Floowdy__creditsByIdResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBytes()
      )
    );
  }

  delegatorsStatus(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "delegatorsStatus",
      "delegatorsStatus(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_delegatorsStatus(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegatorsStatus",
      "delegatorsStatus(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epnsChannel(): Address {
    let result = super.call("epnsChannel", "epnsChannel():(address)", []);

    return result[0].toAddress();
  }

  try_epnsChannel(): ethereum.CallResult<Address> {
    let result = super.tryCall("epnsChannel", "epnsChannel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epnsComm(): Address {
    let result = super.call("epnsComm", "epnsComm():(address)", []);

    return result[0].toAddress();
  }

  try_epnsComm(): ethereum.CallResult<Address> {
    let result = super.tryCall("epnsComm", "epnsComm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gelato(): Address {
    let result = super.call("gelato", "gelato():(address)", []);

    return result[0].toAddress();
  }

  try_gelato(): ethereum.CallResult<Address> {
    let result = super.tryCall("gelato", "gelato():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxAmount(): BigInt {
    let result = super.call("getMaxAmount", "getMaxAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMaxAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMaxAmount", "getMaxAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  host(): Address {
    let result = super.call("host", "host():(address)", []);

    return result[0].toAddress();
  }

  try_host(): ethereum.CallResult<Address> {
    let result = super.tryCall("host", "host():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  memberAdressById(param0: BigInt): Address {
    let result = super.call(
      "memberAdressById",
      "memberAdressById(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_memberAdressById(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "memberAdressById",
      "memberAdressById(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  members(param0: Address): Floowdy__membersResult {
    let result = super.call(
      "members",
      "members(address):(uint256,address,int96,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Floowdy__membersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBytes(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_members(param0: Address): ethereum.CallResult<Floowdy__membersResult> {
    let result = super.tryCall(
      "members",
      "members(address):(uint256,address,int96,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Floowdy__membersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBytes(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  ops(): Address {
    let result = super.call("ops", "ops():(address)", []);

    return result[0].toAddress();
  }

  try_ops(): ethereum.CallResult<Address> {
    let result = super.tryCall("ops", "ops():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parseLoanData(data: Bytes): BigInt {
    let result = super.call("parseLoanData", "parseLoanData(bytes):(uint256)", [
      ethereum.Value.fromBytes(data)
    ]);

    return result[0].toBigInt();
  }

  try_parseLoanData(data: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "parseLoanData",
      "parseLoanData(bytes):(uint256)",
      [ethereum.Value.fromBytes(data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolByTimestamp(param0: BigInt): Floowdy__poolByTimestampResult {
    let result = super.call(
      "poolByTimestamp",
      "poolByTimestamp(uint256):(uint256,uint256,int96,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Floowdy__poolByTimestampResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_poolByTimestamp(
    param0: BigInt
  ): ethereum.CallResult<Floowdy__poolByTimestampResult> {
    let result = super.tryCall(
      "poolByTimestamp",
      "poolByTimestamp(uint256):(uint256,uint256,int96,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Floowdy__poolByTimestampResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  poolId(): BigInt {
    let result = super.call("poolId", "poolId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolId", "poolId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolTimestamp(): BigInt {
    let result = super.call("poolTimestamp", "poolTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolTimestamp",
      "poolTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCredits(): BigInt {
    let result = super.call("totalCredits", "totalCredits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalCredits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalCredits", "totalCredits():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalYieldEarnedMember(_member: Address): BigInt {
    let result = super.call(
      "totalYieldEarnedMember",
      "totalYieldEarnedMember(address):(uint256)",
      [ethereum.Value.fromAddress(_member)]
    );

    return result[0].toBigInt();
  }

  try_totalYieldEarnedMember(_member: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalYieldEarnedMember",
      "totalYieldEarnedMember(address):(uint256)",
      [ethereum.Value.fromAddress(_member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(): boolean {
    let result = super.call("withdraw", "withdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_withdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get floowdy_init(): ConstructorCallFloowdy_initStruct {
    return changetype<ConstructorCallFloowdy_initStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallFloowdy_initStruct extends ethereum.Tuple {
  get host(): Address {
    return this[0].toAddress();
  }

  get superToken(): Address {
    return this[1].toAddress();
  }

  get token(): Address {
    return this[2].toAddress();
  }

  get pool(): Address {
    return this[3].toAddress();
  }

  get aToken(): Address {
    return this[4].toAddress();
  }

  get ops(): Address {
    return this[5].toAddress();
  }

  get epnsComm(): Address {
    return this[6].toAddress();
  }

  get epnsChannel(): Address {
    return this[7].toAddress();
  }
}

export class _calculateYieldCall extends ethereum.Call {
  get inputs(): _calculateYieldCall__Inputs {
    return new _calculateYieldCall__Inputs(this);
  }

  get outputs(): _calculateYieldCall__Outputs {
    return new _calculateYieldCall__Outputs(this);
  }
}

export class _calculateYieldCall__Inputs {
  _call: _calculateYieldCall;

  constructor(call: _calculateYieldCall) {
    this._call = call;
  }
}

export class _calculateYieldCall__Outputs {
  _call: _calculateYieldCall;

  constructor(call: _calculateYieldCall) {
    this._call = call;
  }
}

export class AaveSupplyCall extends ethereum.Call {
  get inputs(): AaveSupplyCall__Inputs {
    return new AaveSupplyCall__Inputs(this);
  }

  get outputs(): AaveSupplyCall__Outputs {
    return new AaveSupplyCall__Outputs(this);
  }
}

export class AaveSupplyCall__Inputs {
  _call: AaveSupplyCall;

  constructor(call: AaveSupplyCall) {
    this._call = call;
  }
}

export class AaveSupplyCall__Outputs {
  _call: AaveSupplyCall;

  constructor(call: AaveSupplyCall) {
    this._call = call;
  }
}

export class AfterAgreementCreatedCall extends ethereum.Call {
  get inputs(): AfterAgreementCreatedCall__Inputs {
    return new AfterAgreementCreatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementCreatedCall__Outputs {
    return new AfterAgreementCreatedCall__Outputs(this);
  }
}

export class AfterAgreementCreatedCall__Inputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementCreatedCall__Outputs {
  _call: AfterAgreementCreatedCall;

  constructor(call: AfterAgreementCreatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall extends ethereum.Call {
  get inputs(): AfterAgreementTerminatedCall__Inputs {
    return new AfterAgreementTerminatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementTerminatedCall__Outputs {
    return new AfterAgreementTerminatedCall__Outputs(this);
  }
}

export class AfterAgreementTerminatedCall__Inputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementTerminatedCall__Outputs {
  _call: AfterAgreementTerminatedCall;

  constructor(call: AfterAgreementTerminatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall extends ethereum.Call {
  get inputs(): AfterAgreementUpdatedCall__Inputs {
    return new AfterAgreementUpdatedCall__Inputs(this);
  }

  get outputs(): AfterAgreementUpdatedCall__Outputs {
    return new AfterAgreementUpdatedCall__Outputs(this);
  }
}

export class AfterAgreementUpdatedCall__Inputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get _superToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agreementClass(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _agreementData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _ctx(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class AfterAgreementUpdatedCall__Outputs {
  _call: AfterAgreementUpdatedCall;

  constructor(call: AfterAgreementUpdatedCall) {
    this._call = call;
  }

  get newCtx(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CancelCreditCall extends ethereum.Call {
  get inputs(): CancelCreditCall__Inputs {
    return new CancelCreditCall__Inputs(this);
  }

  get outputs(): CancelCreditCall__Outputs {
    return new CancelCreditCall__Outputs(this);
  }
}

export class CancelCreditCall__Inputs {
  _call: CancelCreditCall;

  constructor(call: CancelCreditCall) {
    this._call = call;
  }

  get creditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCreditCall__Outputs {
  _call: CancelCreditCall;

  constructor(call: CancelCreditCall) {
    this._call = call;
  }
}

export class CancelTaskCall extends ethereum.Call {
  get inputs(): CancelTaskCall__Inputs {
    return new CancelTaskCall__Inputs(this);
  }

  get outputs(): CancelTaskCall__Outputs {
    return new CancelTaskCall__Outputs(this);
  }
}

export class CancelTaskCall__Inputs {
  _call: CancelTaskCall;

  constructor(call: CancelTaskCall) {
    this._call = call;
  }

  get _taskId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CancelTaskCall__Outputs {
  _call: CancelTaskCall;

  constructor(call: CancelTaskCall) {
    this._call = call;
  }
}

export class CreditCheckInCall extends ethereum.Call {
  get inputs(): CreditCheckInCall__Inputs {
    return new CreditCheckInCall__Inputs(this);
  }

  get outputs(): CreditCheckInCall__Outputs {
    return new CreditCheckInCall__Outputs(this);
  }
}

export class CreditCheckInCall__Inputs {
  _call: CreditCheckInCall;

  constructor(call: CreditCheckInCall) {
    this._call = call;
  }

  get creditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreditCheckInCall__Outputs {
  _call: CreditCheckInCall;

  constructor(call: CreditCheckInCall) {
    this._call = call;
  }
}

export class CreditCheckOutCall extends ethereum.Call {
  get inputs(): CreditCheckOutCall__Inputs {
    return new CreditCheckOutCall__Inputs(this);
  }

  get outputs(): CreditCheckOutCall__Outputs {
    return new CreditCheckOutCall__Outputs(this);
  }
}

export class CreditCheckOutCall__Inputs {
  _call: CreditCheckOutCall;

  constructor(call: CreditCheckOutCall) {
    this._call = call;
  }

  get creditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreditCheckOutCall__Outputs {
  _call: CreditCheckOutCall;

  constructor(call: CreditCheckOutCall) {
    this._call = call;
  }
}

export class PoolRebalanceCall extends ethereum.Call {
  get inputs(): PoolRebalanceCall__Inputs {
    return new PoolRebalanceCall__Inputs(this);
  }

  get outputs(): PoolRebalanceCall__Outputs {
    return new PoolRebalanceCall__Outputs(this);
  }
}

export class PoolRebalanceCall__Inputs {
  _call: PoolRebalanceCall;

  constructor(call: PoolRebalanceCall) {
    this._call = call;
  }
}

export class PoolRebalanceCall__Outputs {
  _call: PoolRebalanceCall;

  constructor(call: PoolRebalanceCall) {
    this._call = call;
  }
}

export class RejectCreditCall extends ethereum.Call {
  get inputs(): RejectCreditCall__Inputs {
    return new RejectCreditCall__Inputs(this);
  }

  get outputs(): RejectCreditCall__Outputs {
    return new RejectCreditCall__Outputs(this);
  }
}

export class RejectCreditCall__Inputs {
  _call: RejectCreditCall;

  constructor(call: RejectCreditCall) {
    this._call = call;
  }

  get creditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RejectCreditCall__Outputs {
  _call: RejectCreditCall;

  constructor(call: RejectCreditCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestCreditCall extends ethereum.Call {
  get inputs(): RequestCreditCall__Inputs {
    return new RequestCreditCall__Inputs(this);
  }

  get outputs(): RequestCreditCall__Outputs {
    return new RequestCreditCall__Outputs(this);
  }
}

export class RequestCreditCall__Inputs {
  _call: RequestCreditCall;

  constructor(call: RequestCreditCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestCreditCall__Outputs {
  _call: RequestCreditCall;

  constructor(call: RequestCreditCall) {
    this._call = call;
  }
}

export class SendNotifCall extends ethereum.Call {
  get inputs(): SendNotifCall__Inputs {
    return new SendNotifCall__Inputs(this);
  }

  get outputs(): SendNotifCall__Outputs {
    return new SendNotifCall__Outputs(this);
  }
}

export class SendNotifCall__Inputs {
  _call: SendNotifCall;

  constructor(call: SendNotifCall) {
    this._call = call;
  }
}

export class SendNotifCall__Outputs {
  _call: SendNotifCall;

  constructor(call: SendNotifCall) {
    this._call = call;
  }
}

export class SetCreditFeeCall extends ethereum.Call {
  get inputs(): SetCreditFeeCall__Inputs {
    return new SetCreditFeeCall__Inputs(this);
  }

  get outputs(): SetCreditFeeCall__Outputs {
    return new SetCreditFeeCall__Outputs(this);
  }
}

export class SetCreditFeeCall__Inputs {
  _call: SetCreditFeeCall;

  constructor(call: SetCreditFeeCall) {
    this._call = call;
  }

  get _CREDIT_FEE(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCreditFeeCall__Outputs {
  _call: SetCreditFeeCall;

  constructor(call: SetCreditFeeCall) {
    this._call = call;
  }
}

export class SetMaxAllowanceCall extends ethereum.Call {
  get inputs(): SetMaxAllowanceCall__Inputs {
    return new SetMaxAllowanceCall__Inputs(this);
  }

  get outputs(): SetMaxAllowanceCall__Outputs {
    return new SetMaxAllowanceCall__Outputs(this);
  }
}

export class SetMaxAllowanceCall__Inputs {
  _call: SetMaxAllowanceCall;

  constructor(call: SetMaxAllowanceCall) {
    this._call = call;
  }

  get _MAX_ALLOWANCE(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxAllowanceCall__Outputs {
  _call: SetMaxAllowanceCall;

  constructor(call: SetMaxAllowanceCall) {
    this._call = call;
  }
}

export class SetVotingPeriodCall extends ethereum.Call {
  get inputs(): SetVotingPeriodCall__Inputs {
    return new SetVotingPeriodCall__Inputs(this);
  }

  get outputs(): SetVotingPeriodCall__Outputs {
    return new SetVotingPeriodCall__Outputs(this);
  }
}

export class SetVotingPeriodCall__Inputs {
  _call: SetVotingPeriodCall;

  constructor(call: SetVotingPeriodCall) {
    this._call = call;
  }

  get _VOTING_PERIOD(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVotingPeriodCall__Outputs {
  _call: SetVotingPeriodCall;

  constructor(call: SetVotingPeriodCall) {
    this._call = call;
  }
}

export class StopCreditPeriodExecCall extends ethereum.Call {
  get inputs(): StopCreditPeriodExecCall__Inputs {
    return new StopCreditPeriodExecCall__Inputs(this);
  }

  get outputs(): StopCreditPeriodExecCall__Outputs {
    return new StopCreditPeriodExecCall__Outputs(this);
  }
}

export class StopCreditPeriodExecCall__Inputs {
  _call: StopCreditPeriodExecCall;

  constructor(call: StopCreditPeriodExecCall) {
    this._call = call;
  }

  get creditId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StopCreditPeriodExecCall__Outputs {
  _call: StopCreditPeriodExecCall;

  constructor(call: StopCreditPeriodExecCall) {
    this._call = call;
  }
}

export class StopStreamExecCall extends ethereum.Call {
  get inputs(): StopStreamExecCall__Inputs {
    return new StopStreamExecCall__Inputs(this);
  }

  get outputs(): StopStreamExecCall__Outputs {
    return new StopStreamExecCall__Outputs(this);
  }
}

export class StopStreamExecCall__Inputs {
  _call: StopStreamExecCall;

  constructor(call: StopStreamExecCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StopStreamExecCall__Outputs {
  _call: StopStreamExecCall;

  constructor(call: StopStreamExecCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
